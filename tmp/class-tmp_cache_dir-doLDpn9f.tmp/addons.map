{"version":3,"sources":["ember-cli-auto-complete.js","ember-cli-auto-complete/components/auto-complete.js","ember-cli-auto-complete/utilities/key-codes.js","ember-drag-drop.js","ember-drag-drop/components/draggable-object-target.js","ember-drag-drop/components/draggable-object.js","ember-drag-drop/components/object-bin.js","ember-drag-drop/mixins/droppable.js","ember-dragula.js","ember-dragula/components/ember-dragula-container.js","ember-dragula/components/ember-dragula.js"],"sourcesContent":["define('ember-cli-auto-complete', ['ember-cli-auto-complete/index', 'ember', 'exports'], function(__index__, __Ember__, __exports__) {\n  'use strict';\n  var keys = Object.keys || __Ember__['default'].keys;\n  var forEach = Array.prototype.forEach && function(array, cb) {\n    array.forEach(cb);\n  } || __Ember__['default'].EnumerableUtils.forEach;\n\n  forEach(keys(__index__), (function(key) {\n    __exports__[key] = __index__[key];\n  }));\n});\n","define('ember-cli-auto-complete/components/auto-complete', ['exports', 'ember', 'ember-cli-auto-complete/utilities/key-codes'], function (exports, Ember, KeyCodes) {\n\n  'use strict';\n\n  var focusOutEvent;\n\n  var VISIBLE = \"visible\";\n  var HIDDEN = \"hidden\";\n\n  function getNewHighlightIndex(direction, index, length) {\n    if (direction === \"down\" && index < length - 1) {\n      return index + 1;\n    } else if (direction === \"up\" && index > 0) {\n      return index - 1;\n    }\n    return index;\n  }\n\n  function keepHighlightInView(event) {\n    var highlighted = document.getElementsByClassName(\"tt-cursor\")[0];\n    if (highlighted) {\n      if (KeyCodes['default'].keyPressed(event) === \"downArrow\") {\n        highlighted.scrollIntoView(false);\n      } else if (KeyCodes['default'].keyPressed(event) === \"upArrow\") {\n        highlighted.scrollIntoView();\n      }\n    }\n  }\n  exports['default'] = Ember['default'].Component.extend({\n    layoutName: \"components/auto-complete\",\n    highlightIndex: -1,\n    visibility: HIDDEN,\n    inputClass: '',\n    inputClazz: Ember['default'].computed(function () {\n      return \"typeahead text-input \" + this.get('inputClass');\n    }),\n    keyUp: function keyUp(event) {\n      if (KeyCodes['default'].keyPressed(event) === \"escape\") {\n        this.set(\"visibility\", HIDDEN);\n      } else if (!KeyCodes['default'].isEscapedCode(event)) {\n        this.set(\"highlightIndex\", -1);\n        this.get(\"options\").forEach(function (item) {\n          item.set(\"highlight\", false);\n        });\n        this.set(\"visibility\", VISIBLE);\n        this.set(\"inputVal\", Ember['default'].$(event.target).val());\n      }\n      keepHighlightInView(event);\n    },\n    focusIn: function focusIn() {\n      if (this.get(\"visibility\") === HIDDEN) {\n        this.set(\"visibility\", VISIBLE);\n      }\n    },\n    focusOut: function focusOut() {\n      clearTimeout(focusOutEvent);\n      var self = this;\n      var func = function func() {\n        if (self.isDestroyed) {\n          return;\n        }\n        self.set(\"visibility\", HIDDEN);\n        if (!self.get(\"selectedFromList\")) {\n          var value = this.get(\"selectedValue\");\n          var optionsToMatch = this.get(\"optionsToMatch\");\n          if (optionsToMatch.indexOf(value) === -1) {\n            self.set(\"inputVal\", \"\");\n            self.set(\"selectedValue\", \"\");\n          }\n        }\n      };\n      focusOutEvent = Ember['default'].run.later(this, func, 200);\n    },\n    keyDown: function keyDown(event) {\n      if (this.get(\"visibility\") !== HIDDEN) {\n        if (KeyCodes['default'].keyPressed(event) === \"downArrow\") {\n          this.highlight(\"down\");\n        } else if (KeyCodes['default'].keyPressed(event) === \"upArrow\") {\n          this.highlight(\"up\");\n        } else if (KeyCodes['default'].keyPressed(event) === \"enter\" || KeyCodes['default'].keyPressed(event) === \"tab\") {\n          if (!Ember['default'].isBlank(this.selectableSuggestion)) {\n            this.send(\"selectItem\", this.selectableSuggestion);\n            this.set(\"visibility\", HIDDEN);\n          } else {\n            var value = this.get(\"selectedValue\");\n            var optionsToMatch = this.get(\"optionsToMatch\");\n            if (optionsToMatch.indexOf(value) >= 0) {\n              this.set(\"selectedFromList\", true);\n              this.set(\"visibility\", HIDDEN);\n            }\n          }\n        }\n      } else {\n        this.set(\"visibility\", VISIBLE);\n      }\n    },\n\n    highlight: function highlight(direction) {\n      var length = this.get(\"suggestions\").length;\n      var currentHighlight = this.get(\"highlightIndex\");\n      var nextHighlight = getNewHighlightIndex(direction, currentHighlight, length);\n\n      if (currentHighlight >= 0) {\n        this.get(\"suggestions\").objectAt(currentHighlight).set(\"highlight\", false);\n      }\n\n      var newSelectedItem = this.get(\"suggestions\").objectAt(nextHighlight);\n      newSelectedItem.set(\"highlight\", true);\n      this.set(\"selectableSuggestion\", newSelectedItem);\n      this.set(\"highlightIndex\", nextHighlight);\n    },\n    actions: {\n      selectItem: function selectItem(item) {\n        var valueProperty = this.get(\"valueProperty\");\n        this.set(\"selectedFromList\", true);\n        this.set(\"selectedValue\", item.get(valueProperty));\n\n        this.sendAction('selectItem', item);\n      }\n    }\n  });\n\n});","define('ember-cli-auto-complete/utilities/key-codes', ['exports'], function (exports) {\n\n  'use strict';\n\n  var keyCodeList = [{ key: \"tab\", code: 9 }, { key: \"enter\", code: 13, escaped: true }, { key: \"escape\", code: 27 }, { key: \"upArrow\", code: 38, escaped: true }, { key: \"downArrow\", code: 40, escaped: true }];\n\n  exports['default'] = {\n    isEscapedCode: function isEscapedCode(event) {\n      var filter = keyCodeList.filter(function (keyCode) {\n        return keyCode.code === event.keyCode && keyCode.escaped;\n      });\n      return filter.length;\n    },\n    keyPressed: function keyPressed(event) {\n      return keyCodeList.filter(function (keyCode) {\n        return keyCode.code === event.keyCode;\n      }).map(function (keyCode) {\n        return keyCode.key;\n      })[0];\n    }\n  };\n\n});","define('ember-drag-drop', ['ember-drag-drop/index', 'ember', 'exports'], function(__index__, __Ember__, __exports__) {\n  'use strict';\n  var keys = Object.keys || __Ember__['default'].keys;\n  var forEach = Array.prototype.forEach && function(array, cb) {\n    array.forEach(cb);\n  } || __Ember__['default'].EnumerableUtils.forEach;\n\n  forEach(keys(__index__), (function(key) {\n    __exports__[key] = __index__[key];\n  }));\n});\n","define('ember-drag-drop/components/draggable-object-target', ['exports', 'ember', 'ember-drag-drop/mixins/droppable'], function (exports, Ember, Droppable) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend(Droppable['default'], {\n    classNames: [\"draggable-object-target\"],\n\n    handlePayload: function(payload) {\n      var obj = this.get('coordinator').getObject(payload,{target: this});\n      this.sendAction('action',obj,{target: this});\n    },\n\n    handleDrop: function(event) {\n      var dataTransfer = event.dataTransfer;\n      var payload = dataTransfer.getData(\"Text\");\n      this.handlePayload(payload);\n    },\n\n    acceptDrop: function(event) {\n      this.handleDrop(event);\n      //Firefox is navigating to a url on drop sometimes, this prevents that from happening\n      event.preventDefault();\n    },\n\n    actions: {\n      acceptForDrop: function() {\n        var hashId = this.get('coordinator.clickedId');\n        this.handlePayload(hashId);\n      }\n    }\n  });\n\n});","define('ember-drag-drop/components/draggable-object', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend({\n    tagName: \"div\",\n    classNames: [\"draggable-object\"],\n    classNameBindings: [\"isDraggingObject:is-dragging-object:\"],\n    attributeBindings: ['draggable'],\n    isDraggable: true,\n\n    draggable: function() {\n      var isDraggable = this.get('isDraggable');\n\n      if (isDraggable) {\n        return true;\n      }\n      else {\n        return null;\n      }\n    }.property('isDraggable'),\n\n    handleDragStart: function(event) {\n\n      var dataTransfer = event.dataTransfer;\n\n      var obj = this.get('content');\n      var id = this.get('coordinator').setObject(obj, { source: this });\n\n      dataTransfer.setData('Text', id);\n\n      if (obj) {\n        Ember['default'].set(obj, 'isDraggingObject', true);\n      }\n      this.set('isDraggingObject', true);\n    }.on(\"dragStart\"),\n\n    handleDragEnd: function() {\n      var obj = this.get('content');\n\n      if (obj) {\n        Ember['default'].set(obj, 'isDraggingObject', false);\n      }\n      this.set('isDraggingObject', false);\n    }.on(\"dragEnd\"),\n\n    actions: {\n      selectForDrag: function() {\n        var obj = this.get('content');\n        var hashId = this.get('coordinator').setObject(obj, { source: this });\n        this.get('coordinator').set(\"clickedId\", hashId);\n      }\n    }\n  });\n\n});","define('ember-drag-drop/components/object-bin', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  var YieldLocalMixin = Ember['default'].Mixin.create({\n    _yield: function(context, options) {\n      var view = options.data.view;\n      var parentView = this._parentView;\n      var template = Ember['default'].get(this, 'template');\n\n      if (template) {\n        Ember['default'].assert(\"A Component must have a parent view in order to yield.\", parentView);\n\n        view.appendChild(Ember['default'].View, {\n          isVirtual: true,\n          tagName: '',\n          _contextView: parentView,\n          template: template,\n          context: Ember['default'].get(view, 'context'),\n          controller: Ember['default'].get(view, 'controller'),\n          templateData: { keywords: {} }\n        });\n      }\n    }\n  });\n\n  var removeOne = function(arr,obj) {\n    var l = arr.get('length');\n    arr.removeObject(obj);\n    var l2 = arr.get('length');\n\n    if (l-1 !== l2) {\n      throw \"bad length \" + l + \" \" + l2;\n    }\n  };\n\n  exports['default'] = Ember['default'].Component.extend(YieldLocalMixin, {\n    model: [],\n    classNames: ['draggable-object-bin'],\n\n    manageList: true,\n\n    handleObjectMoved: function() {\n    }.on(\"objectMoved\"),\n\n    actions: {\n      handleObjectDropped: function(obj) {\n        if (this.get('manageList')) {\n          this.get(\"model\").pushObject(obj);\n        }\n\n        this.trigger(\"objectDroppedInternal\",obj);\n        this.sendAction(\"objectDropped\",{obj: obj, bin: this});\n      },\n\n      handleObjectDragged: function(obj) {\n        if (this.get('manageList')) {\n          removeOne(this.get('model'),obj);\n        }\n        this.trigger(\"objectDraggedInternal\",obj);\n        this.sendAction(\"objectDragged\");\n\n      }\n    }\n  });\n\n});","define('ember-drag-drop/mixins/droppable', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  var Droppable = Ember['default'].Mixin.create({\n\n    classNameBindings: [\n      'accepts-drag',\n      'self-drop'\n    ],\n\n    /**\n     * Read-only className property that is set to true when the component is\n     * receiving a valid drag event. You can style your element with\n     * `.accepts-drag`.\n     *\n     * @property accepts-drag\n     * @private\n     */\n\n    'accepts-drag': false,\n\n    /**\n     * Will be true when the component is dragged over itself. Can use\n     * `.self-drop` in your css to style (or more common, unstyle) the component.\n     *\n     * @property self-drop\n     * @private\n     */\n\n    'self-drop': false,\n\n   /**\n     * Validates drag events. Override this to restrict which data types your\n     * component accepts.\n     *\n     * Example:\n     *\n     * ```js\n     * validateDragEvent: function(event) {\n     *   return event.dataTransfer.types.contains('text/x-foo');\n     * }\n     * ```\n     *\n     * @method validateDragEvent\n     * @public\n     */\n\n    validateDragEvent: function() {\n      return true;\n    },\n\n    /**\n     * Called when a valid drag event is dropped on the component. Override to\n     * actually make something happen.\n     *\n     * ```js\n     * acceptDrop: function(event) {\n     *   var data = event.dataTransfer.getData('text/plain');\n     *   doSomethingWith(data);\n     * }\n     * ```\n     *\n     * @method acceptDrop\n     * @public\n     */\n\n    acceptDrop: Ember['default'].K,\n\n    /**\n     * @method _handleDragOver\n     * @private\n     */\n\n    _handleDragOver: function(event) {\n      if (this._droppableIsDraggable(event)) {\n        this.set('self-drop', true);\n      }\n      if (this.get('accepts-drag')) {\n        return this._allowDrop(event);\n      }\n      if (this.validateDragEvent(event)) {\n        this.set('accepts-drag', true);\n        this._allowDrop(event);\n      } else {\n        this._resetDroppability();\n      }\n    }.on('dragOver'),\n\n    /**\n     * @method _handleDrop\n     * @private\n     */\n\n    _handleDrop: function(event) {\n      // have to validate on drop because you may have nested sortables the\n      // parent allows the drop but the child receives it, revalidating allows\n      // the event to bubble up to the parent to handle it\n      if (!this.validateDragEvent(event)) {\n        return;\n      }\n      this.acceptDrop(event);\n      this._resetDroppability();\n      // TODO: might not need this? I can't remember why its here\n      event.stopPropagation();\n      return false;\n    }.on('drop'),\n\n    /**\n     * Tells the browser we have an acceptable drag event.\n     *\n     * @method _allowDrop\n     * @private\n     */\n\n    _allowDrop: function(event) {\n      event.stopPropagation();\n      event.preventDefault();\n      return false;\n    },\n\n    /**\n     * We want to be able to know if the current drop target is the original\n     * element being dragged or a child of it.\n     *\n     * @method _droppableIsDraggable\n     * @private\n     */\n\n    _droppableIsDraggable: function(event) {\n      return Droppable._currentDrag && (\n        Droppable._currentDrag === event.target ||\n        Droppable._currentDrag.contains(event.target)\n      );\n    },\n\n    /**\n     * @method _resetDroppability\n     * @private\n     */\n\n    _resetDroppability: function() {\n      this.set('accepts-drag', false);\n      this.set('self-drop', false);\n    }.on('dragLeave')\n\n  });\n\n  // Need to track this so we can determine `self-drop`.\n  // It's on `Droppable` so we can test :\\\n  Droppable._currentDrag = null;\n  window.addEventListener('dragstart', function(event) {\n    Droppable._currentDrag = event.target;\n  }, true);\n\n  exports['default'] = Droppable;\n\n});","define('ember-dragula', ['ember-dragula/index', 'ember', 'exports'], function(__index__, __Ember__, __exports__) {\n  'use strict';\n  var keys = Object.keys || __Ember__['default'].keys;\n  var forEach = Array.prototype.forEach && function(array, cb) {\n    array.forEach(cb);\n  } || __Ember__['default'].EnumerableUtils.forEach;\n\n  forEach(keys(__index__), (function(key) {\n    __exports__[key] = __index__[key];\n  }));\n});\n","define('ember-dragula/components/ember-dragula-container', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Component.extend({\n\t\tdidInsertElement: function didInsertElement() {\n\t\t\tEmber['default'].run.next((function () {\n\t\t\t\tthis.get('parentView').drake.containers.push(this.element);\n\t\t\t}).bind(this));\n\t\t},\n\t\tsetElementIdToChildren: function setElementIdToChildren() {\n\t\t\tvar childViews = this.get('childViews');\n\t\t\tvar elementToChild = {};\n\t\t\tchildViews.forEach(function (view) {\n\t\t\t\telementToChild[view.elementId] = view.tree;\n\t\t\t});\n\t\t},\n\t\twillDestroyElement: function willDestroyElement() {}\n\t});\n\n});","define('ember-dragula/components/ember-dragula', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Component.extend({\n\t\twillInsertElement: function willInsertElement() {\n\t\t\tvar options = this.config.options || {};\n\t\t\tthis.set('drake', dragula(options));\n\t\t\tthis.set('parent', this);\n\t\t},\n\t\tdidInsertElement: function didInsertElement() {\n\t\t\tthis.setEventListeners();\n\t\t},\n\t\tsetEventListeners: function setEventListeners() {\n\t\t\tthis.config.eventList ? this.config.eventList.forEach((function (event) {\n\t\t\t\tthis.drake.on(event.name, (function () {\n\t\t\t\t\tthis.sendAction('dragulaEvent', event.name, arguments);\n\t\t\t\t}).bind(this));\n\t\t\t}).bind(this)) : \"\";\n\t\t},\n\t\twillDestroyElement: function willDestroyElement() {\n\t\t\tthis.drake.containers.removeObject(this.element);\n\t\t\tthis.drake.destroy();\n\t\t\tthis.set('drake', '');\n\t\t}\n\t});\n\n});"],"names":[],"mappingszHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"addons.js"}